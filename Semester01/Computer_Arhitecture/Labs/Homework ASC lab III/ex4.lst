     1                                  bits 32         ; Assembling for the 32-bit architecture
     2                                  global start    ; Declare the 'start' label as the entry point of the program
     3                                  
     4                                  extern exit     ; Inform the assembler that the 'exit' symbol is external (defined in an external library)
     5                                  import exit msvcrt.dll  ; Specify that 'exit' is defined in the msvcrt.dll library
     6                                  
     7                                  section .data   ; Data section
     8                                     
     9 00000000 02                         b db 2
    10 00000001 08000000                   e dd 8
    11 00000005 0C00                       a dw 12
    12 00000007 0A00000000000000           x dq 10
    13                                     
    14                                     
    15                                      
    16                                      
    17                                  section .text   ; Code section ;Am avut de rezolvat: x-b+8+(2*a-b)/(b*b)+e (ex20); a-word; b-byte; e-doubleword; x-qword
    18                                  start:
    19                                              
    20 00000000 8A1D[00000000]                  mov BL, [b]
    21 00000006 B700                            mov BH, 0; BX = b 
    22 00000008 B002                            mov AL, 2
    23 0000000A 66F725[05000000]                mul word [a]; AX = a * 2
    24 00000011 6629D8                          sub AX, BX; 2*a - b 
    25 00000014 6689C1                          mov CX, AX; CX = 2*a - b  
    26 00000017 A0[00000000]                    mov AL, [b]
    27 0000001C F625[00000000]                  mul byte [b]; AX = b * b
    28 00000022 6689C3                          mov BX, AX; BX = b * b 
    29 00000025 6689C8                          mov AX, CX; AX = 2*a - b
    30 00000028 66BA0000                        mov DX,0
    31 0000002C 66F7F3                          DIV BX;
    32 0000002F 8005[00000000]08                add byte [b], 8; b = b + 8
    33 00000036 8A1D[00000000]                  mov BL, [b]
    34 0000003C A2[05000000]                    mov [a], AL; a = (2*a-b)/(b*b)
    35 00000041 00D8                            add AL, BL; b+8+(2*a-b)/(b*b)
    36 00000043 B400                            mov AH, 0;
    37 00000045 66A1[05000000]                  mov AX, [a]; a = b+8+(2*a-b)/(b*b)
    38 0000004B 66BA0000                        mov DX, 0
    39 0000004F A1[05000000]                    mov EAX, [a]; EAX = b+8+(2*a-b)/(b*b)
    40 00000054 BA00000000                      mov EDX, 0
    41 00000059 8B1D[07000000]                  mov EBX, [x]; EBX = x  
    42 0000005F 29D8                            sub EAX, EBX;EAX = x-b+8+(2*a-b)/(b*b)+e
    43 00000061 A3[07000000]                    mov [x], EAX; x = x-b+8+(2*a-b)/(b*b)+e
    44 00000066 A1[01000000]                    mov EAX, [e]
    45 0000006B BA00000000                      mov EDX, 0
    46 00000070 0305[07000000]                  add EAX, [x]; EAX = x-b+8+(2*a-b)/(b*b)+e
    47                                          
    48                                          
    49                                          
    50                                          
    51                                          
    52                                          
    53                                          
    54                                          
    55                                          
    56                                              
    57                                              
    58                                              
    59                                              
    60                                              
    61                                              
    62                                              
    63                                              
    64                                              
    65                                        
    66                                        
    67                                        
    68                                        
    69                                        
    70                                  
    71                                      ; Call 'exit(0)' to end the program (0 represents a success status)
    72 00000076 6A00                        push dword 0  ; Push the parameter (status code) onto the stack
    73 00000078 FF15[00000000]              call [exit]   ; Call the 'exit' function to exit the program
    74                                      
