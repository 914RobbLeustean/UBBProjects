     1                                  bits 32         ; Assembling for the 32-bit architecture
     2                                  global start    ; Declare the 'start' label as the entry point of the program
     3                                  
     4                                  extern exit     ; Inform the assembler that the 'exit' symbol is external (defined in an external library)
     5                                  import exit msvcrt.dll  ; Specify that 'exit' is defined in the msvcrt.dll library
     6                                  
     7                                  section .data   ; Data section
     8                                     
     9 00000000 05                         a db 5
    10 00000001 0600                       b dw 6
    11 00000003 02000000                   c dd 2
    12 00000007 0A00000000000000           d dq 10
    13                                     
    14                                     
    15                                      
    16                                      
    17                                  section .text   ; Code section ;Am avut de rezolvat: (c+b+b)-(c+a+d)(ex5) a - byte, b - word, c - double word, d - qword - Signed  representation
    18                                  start:
    19 00000000 66A1[01000000]                   mov AX, [b]; AX = b 
    20 00000006 660305[01000000]                 add AX, [b]; AX = b + b
    21 0000000D 98                               cwde; Storing the result from AX into EAX
    22 0000000E 8B1D[03000000]                   mov EBX, [c]
    23 00000014 01D8                             add EAX, EBX; EAX = c + b + b
    24 00000016 89C3                             mov  EBX, EAX; EBX = EAX
    25 00000018 A0[00000000]                     mov AL, [a]
    26 0000001D 6698                             cbw; Storing the result form AL into AX 
    27 0000001F 98                               cwde; Storing the result from AX into EAX
    28 00000020 0305[03000000]                   add EAX, [c]; EAX = c + a 
    29 00000026 99                               cdq; Storing the result from EAX into EDX;EAX 
    30 00000027 0305[07000000]                   add EAX, [d]; EDX = c + a + d 
    31 0000002D 29C3                             sub EBX, EAX; (c+b+b)-(c+a+d)
    32                                           
    33                                           
    34                                              
    35                                              
    36                                              
    37                                              
    38                                              
    39                                        
    40                                  
    41                                      ; Call 'exit(0)' to end the program (0 represents a success status)
    42 0000002F 6A00                        push dword 0  ; Push the parameter (status code) onto the stack
    43 00000031 FF15[00000000]              call [exit]   ; Call the 'exit' function to exit the program
    44                                      
