     1                                  bits 32         ; Assembling for the 32-bit architecture
     2                                  global start    ; Declare the 'start' label as the entry point of the program
     3                                  
     4                                  extern exit     ; Inform the assembler that the 'exit' symbol is external (defined in an external library)
     5                                  import exit msvcrt.dll  ; Specify that 'exit' is defined in the msvcrt.dll library
     6                                  
     7                                  section .data   ; Data section
     8                                     
     9 00000000 02                         b db 2
    10 00000001 08000000                   e dd 8
    11 00000005 0C00                       a dw 12
    12 00000007 0A00000000000000           x dq 10
    13                                     
    14                                     
    15                                      
    16                                      
    17                                  section .text   ; Code section ;Am avut de rezolvat: x-b+8+(2*a-b)/(b*b)+e (ex20); a-word; b-byte; e-doubleword; x-qword
    18                                  start:
    19 00000000 A0[00000000]                       mov AL, [b]; AL = b
    20 00000005 F625[00000000]                     mul byte[b]; AX = b * b
    21 0000000B 6689C1                             mov CX, AX; CX = AX
    22                                             
    23 0000000E B002                               mov AL, 2
    24 00000010 66F725[05000000]                   mul word[a]; AX = a * 2
    25 00000017 98                                 cwde; AX -> EAX
    26 00000018 89C3                               mov EBX,EAX; EBX = 2 * a 
    27                                             
    28 0000001A A0[00000000]                       mov AL, [b]; AL = b
    29 0000001F 6698                               cbw; AL -> AX, AX = b
    30 00000021 98                                 cwde; AX -> EAX, EAX = b
    31                                             
    32 00000022 29C3                               sub EBX, EAX; EBX = 2*a - b
    33                                             
    34 00000024 6689C8                             mov AX, CX; AX = CX, AX = b * b
    35 00000027 98                                 cwde; AX -> EAX, EAX = b * b
    36                                             
    37 00000028 89C1                               mov ECX, EAX; ECX = EAX, ECX = b * b
    38 0000002A 89D8                               mov EAX, EBX; EAX = EBX, EAX = 2*a - b
    39 0000002C BA00000000                         mov EDX, 0
    40 00000031 F7F1                               div ECX; AX = (2*a-b) / b*b
    41                                             
    42 00000033 6689C1                             mov CX, AX; BX = (2*a-b) / b*b
    43                                             
    44 00000036 8005[00000000]08                   add byte[b], 8; b =  b + 8
    45 0000003D A0[00000000]                       mov AL, [b]
    46 00000042 6698                               cbw; AL -> AX
    47 00000044 98                                 cwde; AX -> EAX
    48 00000045 99                                 cdq; EAX -> EDX:EAX
    49                                             
    50 00000046 8B1D[07000000]                     mov EBX, [x]; EBX = x
    51 0000004C 29C3                               sub EBX, EAX; EBX = x - b + 8
    52                                             
    53 0000004E 6689C8                             mov AX, CX; AX = (2*a-b) / b*b
    54 00000051 98                                 cwde; AX - > EAX
    55 00000052 99                                 cdq; EAX -> EDX:EAX
    56                                             
    57 00000053 01C3                               add EBX, EAX; EBX = x-b+8+(2*a-b)/(b*b)
    58                                             
    59 00000055 A1[01000000]                       mov EAX, [e]; EAX = e 
    60 0000005A 99                                 cdq; EAX -> EDX:EAX
    61 0000005B 01D8                               add EAX, EBX; EAX = x-b+8+(2*a-b)/(b*b)+e
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          
    71                                          
    72                                              
    73                                              
    74                                              
    75                                              
    76                                              
    77                                              
    78                                              
    79                                              
    80                                              
    81                                        
    82                                        
    83                                        
    84                                        
    85                                        
    86                                  
    87                                      ; Call 'exit(0)' to end the program (0 represents a success status)
    88 0000005D 6A00                        push dword 0  ; Push the parameter (status code) onto the stack
    89 0000005F FF15[00000000]              call [exit]   ; Call the 'exit' function to exit the program
    90                                      
